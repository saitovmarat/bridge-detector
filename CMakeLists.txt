cmake_minimum_required(VERSION 3.14)

project(bridge-detector LANGUAGES CXX)

find_package(Python3 REQUIRED COMPONENTS Interpreter)

include(ProcessorCount)
if(COMMAND ProcessorCount)
    ProcessorCount(N)
    if(NOT N EQUAL 0)
        set(CMAKE_BUILD_PARALLEL_STD ${N} CACHE INTERNAL "parallel jobs")
    endif()
else()
    message(STATUS "ProcessorCount –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
endif()

set(API_DIR ${CMAKE_CURRENT_SOURCE_DIR}/modules/bridge-detector-api)
set(REQUIREMENTS_FILE ${API_DIR}/requirements.txt)
set(VENV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/.venv)

if(NOT EXISTS ${REQUIREMENTS_FILE})
    message(FATAL_ERROR "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω: ${REQUIREMENTS_FILE}
    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π bridge-detector-api –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–ø–∫—É modules/")
endif()

if(WIN32)
    set(PYTHON_VENV_BIN_DIR Scripts)
    set(PYTHON_EXECUTABLE_IN_VENV ${VENV_DIR}/Scripts/python.exe)
else()
    set(PYTHON_VENV_BIN_DIR bin)
    set(PYTHON_EXECUTABLE_IN_VENV ${VENV_DIR}/bin/python)
endif()

set(SETUP_DONE_FLAG ${VENV_DIR}/.setup_done)

add_custom_command(
    OUTPUT ${SETUP_DONE_FLAG}
    COMMAND ${CMAKE_COMMAND} -E echo "üîß –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${VENV_DIR}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${VENV_DIR}
    COMMAND ${Python3_EXECUTABLE} -m venv ${VENV_DIR}
    COMMAND ${PYTHON_EXECUTABLE_IN_VENV} -m pip install --upgrade pip
    COMMAND ${CMAKE_COMMAND} -E chdir ${API_DIR} 
            ${PYTHON_EXECUTABLE_IN_VENV} -m pip install -r ${REQUIREMENTS_FILE}
    COMMAND ${CMAKE_COMMAND} -E touch ${SETUP_DONE_FLAG}
    COMMENT "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    VERBATIM
)

add_custom_target(setup_python DEPENDS ${SETUP_DONE_FLAG})
set_property(TARGET setup_python PROPERTY USES_TERMINAL TRUE)

add_custom_command(TARGET setup_python POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "‚úÖ Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ ${VENV_DIR}"
)

set(MODULES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/modules)

if(EXISTS ${MODULES_DIR})
    message(STATUS "üîç –ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π –≤ –ø–∞–ø–∫–µ: ${MODULES_DIR}")

    file(GLOB MODULE_FOLDERS LIST_DIRECTORIES true ${MODULES_DIR}/*)

    list(FILTER MODULE_FOLDERS EXCLUDE REGEX "/\\.")
    list(FILTER MODULE_FOLDERS EXCLUDE REGEX "/__pycache__")

    foreach(MODULE_PATH IN LISTS MODULE_FOLDERS)
        get_filename_component(MODULE_NAME ${MODULE_PATH} NAME)

        set(CMAKELISTS_FILE ${MODULE_PATH}/CMakeLists.txt)

        if(EXISTS ${CMAKELISTS_FILE})
            message(STATUS "üì¶ –ü–æ–¥–∫–ª—é—á–∞—é –º–æ–¥—É–ª—å: ${MODULE_NAME}")
            add_subdirectory(${MODULE_PATH} ${CMAKE_CURRENT_BINARY_DIR}/modules/${MODULE_NAME})
        else()
            message(STATUS "‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${MODULE_NAME} ‚Äî –Ω–µ—Ç CMakeLists.txt")
        endif()
    endforeach()
else()
    message(WARNING "–ü–∞–ø–∫–∞ modules/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${MODULES_DIR}")
endif()

if(TARGET BridgeVision)
    add_custom_target(run_client
        COMMAND $<TARGET_FILE:BridgeVision>
        DEPENDS BridgeVision
        USES_TERMINAL
        COMMENT "üéÆ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ BridgeVision..."
    )
    message(STATUS "üéØ –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞—Ä–≥–µ—Ç: run_client")
endif()

message(STATUS "")
message(STATUS "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏:")
message(STATUS "   setup_python ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
message(STATUS "   BridgeVision ‚Äî —Å–æ–±—Ä–∞—Ç—å C++ –∫–ª–∏–µ–Ω—Ç")
message(STATUS "   run_client   ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å C++ –∫–ª–∏–µ–Ω—Ç")
message(STATUS "")